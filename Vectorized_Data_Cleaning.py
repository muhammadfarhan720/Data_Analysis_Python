# -*- coding: utf-8 -*-
"""CDS_Vectorized_Data_cleaning_Finalized.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XEe-KLOpyizrUyAQhd0xwOCU1A2-op0-

# CDS_3

**Enter your Name:**  Muhammad Farhan Azmine
"""

# Run this cell first.  Do NOT edit this cell.
import pandas as pd
import numpy as np

survey = pd.read_csv("class_survey_dirty.csv")
survey.shape
# The output below should show "(106, 25)" if everything has loaded correctly.

"""  Imagine that you are giving a rather strange survey to a college class.  After the students have all submitted their responses, you notice that the data are in need of some substantial cleaning.  For step 1 of your cleaning, make the modifications listed below.

Although you have only surveyed 106 students, assume that the data is very large -- rather than cleaning the data by editing individual values in the DataFrame, create more general functions and behaviors that can be applied to full columns (or to the entire DataFrame).  This will give you practice in cleaning large datasets with many more rows.

Store the resulting partially cleaned table into variable 'Answer1'.  It should have the same column labels and order as 'survey'.

Your cleaning should include:

 **Age:**  There is one extreme value (3) that we should change.  Let's set it to the median value of that column.  Ensure that the column is of type int64 afterward.
 **Siblings:**  Replace the extreme value (96) with the column median.  Ensure that the column is of type int64 afterward.
 **Sleep:**  Replace the extreme value (0.3125) with the column median, and ensure that the columns is of type floatt64 afterward.
 **PlacesLived:**  Replace the extreme value (500) with the column median, and ensure that the columns is of type int64 afterward.
 **Shoe:**  Remove text, replace the extreme value (73) with the column median, and ensure that the column is of type float64 afterward.
* **Restaurants:**  Change 'Twice' to 2, and ensure that the column is of type int64 afterward.
 **PhoneTalking:**  Convert '4 Hours' into minutes, change '120 min' to 120, and ensure that the column is of type int64 afterward.
 **PhoneApps:**  Change '20-30' to 25, and ensure that the column is of type int64 afterward.

*Note 1:*  Remember that you can check the dtype of all columns with `Answer1.dtypes`.

*Note 2:*  Sometimes you need to explicitly convert the dtype of a column, even after you have made modifications to remove text and create a column of integers.  In this case, you can modify a column's dtype with (for example) `Answer1.Restaurants = Answer1.Restaurants.astype("int64")`.
"""

# Problem 1
Answer1 = survey.copy()

Answer1

def Age_corrector (df):
  median_value = df["Age"].median()
  # Replace values less than or equal to 6 with the median  (Pretending anyone less than 6 year old can't be a college student !)
  df.loc[df["Age"] < 6,["Age"]] = median_value
  df["Age"]=df["Age"].astype("int64")

  return df


Answer1=Age_corrector(Answer1)


pd.set_option('display.max_rows', None)  # Show all rows

#Answer1.Age

Answer1

def Siblings_corrector (df):
  median_value = df["Siblings"].median()

  # print(median_value)

  # Replace values geater than 20 times of the median count of siblings or values that are negative !
  df.loc[((df["Siblings"]>20*median_value)|(df["Siblings"]<0)) ,["Siblings"]] = median_value

  df["Siblings"]=df["Siblings"].astype("int64")

  return df


Answer1=Siblings_corrector(Answer1)

pd.set_option('display.max_rows', None)  # Show all rows

#Answer1.Age

Answer1

def Sleep_corrector (df):

  median_value = df["Sleep"].median()

  #print(median_value)

  # Replace values less than 1 (Guessing no one sleeps less than an hour a day !)
  df.loc[(df["Sleep"]<1) ,["Sleep"]] = median_value

  df["Sleep"]=df["Sleep"].astype("float64")

  return df


Answer1=Sleep_corrector(Answer1)

pd.set_option('display.max_rows', None)  # Show all rows

#Answer1.Age

Answer1

def PlacesLived_corrector (df):
  median_value = df["PlacesLived"].median()

  # print(median_value)

  df.loc[((df["PlacesLived"]>200)|(df["PlacesLived"]<0)) ,["PlacesLived"]] = median_value

  df["PlacesLived"]=df["PlacesLived"].astype("int64")

  return df


Answer1=PlacesLived_corrector(Answer1)

pd.set_option('display.max_rows', None)  # Show all rows

Answer1

def Shoe_corrector (df):



  df["Shoe"]= df['Shoe'].str.extract(r'(\d+\.\d+|\d+)').astype('float64')

  #df["Shoe"]=df["Shoe"].astype("int64")

  median_value = df["Shoe"].median()

  # print(median_value)

  # Replace values geater than 20 times of the median count of PlacesLived and values that are negative !
  df.loc[((df["Shoe"]>5*median_value)|(df["Shoe"]<0)) ,["Shoe"]] = median_value

  df["Shoe"]=df["Shoe"].astype("float64")

  return df


Answer1=Shoe_corrector(Answer1)



pd.set_option('display.max_rows', None)  # Show all rows

#Answer1.Age

Answer1

def Restaurants_corrector (df):

  replacement_dict = {'Once': 1, 'Twice': 2, 'Thrice': 3}

  df['Restaurants'] = df['Restaurants'].replace(replacement_dict)

  # Ensure the 'Restaurants' column is of type int64

  df['Restaurants'] = df['Restaurants'].astype('int64')

  return df


Answer1=Restaurants_corrector(Answer1)



pd.set_option('display.max_columns', None)  # Show all rows

#Answer1.Age

Answer1

def PhoneTalking_corrector (entry):

  #df['Restaurants'] = df['Restaurants'].replace(('Twice', 2)|('Once', 1)|('Thrice', 2))

  # Ensure the 'Restaurants' column is of type int64

  if 'Hours' in entry:
      value = int(entry.split(' Hours')[0])
      return value * 60

  elif 'min' in entry:

      value = int(entry.split(' min')[0])

      return value

  else :
      return entry



Answer1["PhoneTalking"]=Answer1["PhoneTalking"].apply(PhoneTalking_corrector)


Answer1["PhoneTalking"]=Answer1["PhoneTalking"].astype("int64")


pd.set_option('display.max_rows', None)  # Show all rows

#Answer1.Age

Answer1

def PhoneApps_corrector (entry):

  #df['Restaurants'] = df['Restaurants'].replace(('Twice', 2)|('Once', 1)|('Thrice', 2))

  # Ensure the 'Restaurants' column is of type int64

  if '-' in entry:
      value = int(entry.split('-')[0]) + int(entry.split('-')[1])

      return value/2


  else :
      return entry



Answer1["PhoneApps"]=Answer1["PhoneApps"].apply(PhoneApps_corrector)


Answer1["PhoneApps"]=Answer1["PhoneApps"].astype("int64")


pd.set_option('display.max_rows', None)  # Show all rows

#Answer1.Age

Answer1

Answer1

"""**Problem 2: (20 points)**  For step 2 of your cleaning, make the modifications listed below.  Again, make the assumption that the data are very large and that your cleaning steps should be generalized.

Store the resulting clean table into variable 'Answer2'.  It should have the same column labels and order as 'survey'.

* **(2pts)** **FBFriends:**  Change "Don't have social media" and "N / A" to 0, remove other text, and ensure that the column is of type int64 afterward.
* **(2pts)** **CompType:**  Change 'PC' to 100 and 'Mac' to 0, remove other text, and ensure that the column is of type int64 afterward.
* **(3pts)** **Temperature:**  Remove text, replace the three Fahrenheit values (68, 75, and 86) with their Celsius equivalent, and ensure that the column is of type float64 afterward.
* **(3pts)** **DistanceFromHome:**  Remove 'km' and its variants (e.g., 'KM'), and ensure that the column is of type float64 afterward.  Note that commas in these values can cause conversion issues.
* **(3pts)** **HDD:**  Standardize to GB (treat 1TB as 1000GB to keep things easy, and assume that unlabeled values are already in GB).  Remove all text and ensure that the column is of type float64 afterward.
* **(3pts)** **RAM:**  Remove all text (assume that all values are already in GB).  Ensure that the column is of type int64 afterward.
* **(4pts)** **Major:**  We need to standardize the set of majors to the following set:  CMDA, CS, DCC, FIN, ISE, MATH, STAT.
"""

# Problem 2
Answer2 = Answer1.copy()

def FBFriends_corrector (entry):

  #df['Restaurants'] = df['Restaurants'].replace(('Twice', 2)|('Once', 1)|('Thrice', 2))

  # Ensure the 'Restaurants' column is of type int64

  if ('Don\'t have social media') in entry:
      #value = int(entry.split(' Hours')[0])
      return int(0)

  elif ('N / A') in entry:

      return int(0)

  else :
      numeric_part = ''.join(char for char in entry if char.isdigit())
      return int(numeric_part) if numeric_part else 0



Answer2["FBFriends"]=Answer2["FBFriends"].apply(FBFriends_corrector)



Answer2["FBFriends"]=Answer2["FBFriends"].astype("int64")


pd.set_option('display.max_rows', None)  # Show all rows

#Answer1.Age

Answer2

def CompType_corrector (entry):

  #df['Restaurants'] = df['Restaurants'].replace(('Twice', 2)|('Once', 1)|('Thrice', 2))

  # Ensure the 'Restaurants' column is of type int64


  numeric_part = ''.join(char for char in entry if char.isdigit())
  return int(numeric_part) if numeric_part else entry



Answer2["CompType"]=Answer2["CompType"].apply(CompType_corrector)



def CompType_corrector_two (entry):
  entry_str = str(entry)
  if ('PC') in entry_str:

      return int(100)

  elif ('Mac') in entry_str:

      return int(0)

  else:
      return entry_str

Answer2["CompType"]=Answer2["CompType"].apply(CompType_corrector_two)


Answer2["CompType"]=Answer2["CompType"].astype("int64")


pd.set_option('display.max_rows', None)  # Show all rows

#Answer1.Age

Answer2

def fahrenheit_to_celsius(fahrenheit):
    celsius = (fahrenheit - 32) * 5/9
    return celsius

def Temperature_corrector (df):



  df["Temperature"]= df['Temperature'].str.extract(r'(\d+\.\d+|\d+)').astype('float64')

  #df["Shoe"]=df["Shoe"].astype("int64")

  # median_value = df["Shoe"].median()

  # print(median_value)

  # # Replace values geater than 20 times of the median count of PlacesLived and values that are negative !
  # df.loc[((df["Temperature"]>50)) ,["Temperature"]] = ((df["Temperature"]>50)-100)
  df.loc[df["Temperature"] > 50, "Temperature"] = df.loc[df["Temperature"] > 50, "Temperature"].apply(fahrenheit_to_celsius)

  df["Temperature"]=df["Temperature"].astype("float64")

  return df


Answer2=Temperature_corrector(Answer2)



pd.set_option('display.max_rows', None)  # Show all rows

#Answer1.Age

Answer2

# Function to clean and convert values
def DistanceFromHome_corrector(entry):
    # Remove 'km' and its variants (case-insensitive)
    entry = entry.replace(' km', '').replace(' KM', '')
    # Remove commas
    entry = entry.replace(',', '')

    numeric_part = ''.join(char for char in entry if char.isdigit() or char == '.')

    return float(numeric_part) if numeric_part else 0.0


Answer2['DistanceFromHome'] = Answer2['DistanceFromHome'].apply(DistanceFromHome_corrector)


Answer2['DistanceFromHome'] = Answer2['DistanceFromHome'].astype('float64')

Answer2

# def HDD_corrector (entry):

#   #df['Restaurants'] = df['Restaurants'].replace(('Twice', 2)|('Once', 1)|('Thrice', 2))

#   # Ensure the 'Restaurants' column is of type int64

#   entry = entry.lower()  # Convert to lowercase for case-insensitive comparisons

#     # Treat 1TB as 1000GB and remove all text
#   if 'tb' in entry:
#       numeric_part = ''.join(char for char in entry if char.isdigit())
#       return float(numeric_part) * 1000 if numeric_part else 0.0

#   else :
#       numeric_part = ''.join(char for char in entry if char.isdigit())
#       return int(numeric_part) if numeric_part else 0


def HDD_corrector(entry):
    entry = entry.lower()  # Convert to lowercase for case-insensitive comparisons

    # Treat 1TB as 1000GB and remove 'gb' and 'tb'
    if 'tb' in entry:
        numeric_part = ''.join(char for char in entry if char.isdigit() or char == '.')
        return float(numeric_part) * 1000 if numeric_part else 0.0

    elif 'terabyte' in entry:
        numeric_part = ''.join(char for char in entry if char.isdigit() or char == '.')
        return float(numeric_part) * 1000 if numeric_part else 0.0


    elif 'gb' in entry:
        numeric_part = ''.join(char for char in entry if char.isdigit() or char == '.')
        return float(numeric_part) if numeric_part else 0.0
    else:
        numeric_part = ''.join(char for char in entry if char.isdigit() or char == '.')
        return float(numeric_part) if numeric_part else 0.0



Answer2["HDD"]=Answer2["HDD"].apply(HDD_corrector)



Answer2["HDD"]=Answer2["HDD"].astype("float64")


pd.set_option('display.max_rows', None)  # Show all rows

#Answer1.Age

Answer2

def RAM_corrector (df):



  df["RAM"]= df['RAM'].str.extract(r'(\d+)').astype('int64')

  #df["Shoe"]=df["Shoe"].astype("int64")



  return df


Answer2=RAM_corrector(Answer2)



pd.set_option('display.max_rows', None)  # Show all rows

#Answer1.Age

Answer2

def Major_corrector (entry):

  #df['Restaurants'] = df['Restaurants'].replace(('Twice', 2)|('Once', 1)|('Thrice', 2))

  # Ensure the 'Restaurants' column is of type int64

  entry = entry.upper()  # Convert to lowercase for case-insensitive comparisons

  # Treat 1TB as 1000GB and remove all text
  if 'CENTRIC' in entry:

      return 'DCC'
  elif 'FINANCE'  in entry :

      return 'FIN'

  elif 'FINTECH'  in entry :

      return 'FIN'

  elif 'MODELING'  in entry :

      return 'CMDA'

  elif 'INDUSTRIAL'  in entry :

      return 'ISE'

  elif 'MATHEMATICS'  in entry :

      return 'MATH'

  elif 'STATISTICS'  in entry :

      return 'STAT'

  elif 'COMPUTER SCIENCE'  in entry :

      return 'CS'

  else :
      return entry




Answer2["Major"]=Answer2["Major"].apply(Major_corrector)



#Answer2["Major"]=Answer2["Major"].astype("float64")


pd.set_option('display.max_rows', None)  # Show all rows

#Answer1.Age

Answer2

Answer2

"""  Answer the following statistical questions about the cleaned DataFrame.  Answers are provided for each so that you can verify that your cleaning worked as intended.

 What is the mean number of Facebook friends for students in the class?  Store the result as Answer3.
What is the standard deviation of the Extrovert score for students in the class?  Store the result as Answer4.
 What is the median age of the students who have lived in more than 3 places.  Store the result as Answer5.
 How many students have a hard drive that is one terabyte or larger?  Store the result as Answer6.

*Note 3:* Make sure that you're using the Answer2 dataset to answer each question!
"""

# Problem 3 answer should be 493.896226
# Problem 4 answer should be 21.594881
# Problem 5 answer should be 21
# Problem 6 answer should be 29

Answer3= Answer2.FBFriends.mean()

Answer3

Answer4= Answer2.Extrovert.std()

Answer4

filtered_df = Answer2[Answer2["PlacesLived"] > 3]

median_age = filtered_df['Age'].median()


Answer5 = median_age

Answer5

filtered_hd_df = Answer2[Answer2["HDD"] >= 1000]




Answer6=len(filtered_hd_df)

Answer6

print("Mean FB Friends:", Answer3)
print("Standard Deviation Extrovert:", Answer4)
print("Mean Age with >3 Places Lived:", Answer5)
print("Count with >=1TB HDD:", Answer6)